<script>
// @ts-nocheck  

import '@awesome.me/webawesome/dist/styles/themes/default.css';
import '@kameo/core/style/theme.css';
import '@kameo/core/webawesome.js';

import { Kameo, kameoHelpers } from '@kameo/core';
import { StarterKit } from '@kameo/starter-kit';
import { FormKit } from '@kameo/form-kit';
import { SlashCommand, suggestion } from '@kameo/extension-slash-command';
import { Placeholder } from '@kameo/extensions';
import { PlaceholderField, placeholderFieldHelpers } from '@kameo/extension-placeholder-field';

const documentMode = 'edit';

const initKameo = () => {
  const kameo = new Kameo({
    element: document.querySelector('#kameo'),
    extensions: [
      StarterKit,
      FormKit,
      PlaceholderField,
      SlashCommand.configure({ suggestion }),
      Placeholder.configure({ placeholder: 'Press / for commands...' }),
    ],
    documentMode,
  });
  return kameo;
};

const createDemoForm = (kameo) => {
  const pos = kameo.state.doc.content.size;
  kameo
    .chain()
    .insertContentAt(pos, `<h1>Hello, <span data-placeholder-field data-id="name" data-kind="text" data-name="name" data-label="Your Name" data-color="#7c3aed"></span></h1><p>With Kameo you can build forms like <b>documents</b></p>`)
    .insertFormInputName(pos, { required: true, })
    .insertFormInputEmail(pos, { required: true })
    .insertFormTextarea(pos, { required: true, resize: 'none' })
    .insertFormRating(pos)
    .insertFormSubmit(pos)
    .run();
};

const handleKameoEvents = (kameo) => {
  kameo.on('submit', async (event) => {    
    if (!event.valid) {
      event.setResult({
        success: false,
        message: 'The form is invalid',
      });
      return;
    }

    // Submit the form and set result.
    await new Promise((resolve) => setTimeout(resolve, 2500));
    event.setResult({
      success: true,
      message: 'Form sent',
    });
  });

  kameo.on('submit:result', (event) => {
    if (!event.success) return;

    // Exclude nodes.
    const data = Object.fromEntries(
      Object.entries(event.formData).map(([_key, data]) => [data.name, data.value])
    );
    window.alert(`${event.message} \n ${JSON.stringify(data)}`);
  });

  kameo.on('update', () => {
    const [fieldName] = kameoHelpers.findFormFields((node) => node.attrs.name === 'name', kameo.state);
    if (!fieldName) return;
    const node = fieldName.node
    kameo.commands.updatePlaceholderFieldById('name', { value: node.attrs.value });
  });
};

const handleDocumentMode = (kameo, defaultMode) => {
  const select = document.querySelector('.km-kameo-demo__document-mode select');
  if (select) {
    select.value = defaultMode;
    select.addEventListener('change', (event) => {
      kameo.setDocumentMode(event.target.value);
    });
  }
};

const init = () => {
  const kameo = initKameo();
  globalThis.kameo = kameo;

  createDemoForm(kameo);
  handleDocumentMode(kameo, documentMode);
  handleKameoEvents(kameo);
};

init();
</script>

<div class="km-kameo-demo">
  <div class="km-kameo-demo__actions">
    <div class="km-kameo-demo__document-mode">
      <select>
        <option value="" selected disabled>Document mode</option>
        <option value="edit">Edit</option>
        <option value="view">View</option>
      </select>
    </div>
  </div>

  <div id="kameo" class="km-kameo-container"></div>
</div>

<style is:global>
  .km-kameo-demo {
    width: 100%;
  }

  .km-kameo-demo__actions {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 12px;
    margin-bottom: 10px;
  }

  .km-kameo-demo__document-mode select {
    width: 140px;
    padding: 6px 10px;
    border: 1px solid rgb(229 231 235);
    appearance: base-select;
    border-radius: 6px;
    background: none;
  }

  .km-kameo-container {
    width: 100%;
    border: 1px solid rgb(229 231 235);
    border-radius: 6px;
    box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.1) 0px 1px 2px -1px;
  }

  .km-kameo-container .kameo {
    color: #000;
    padding: 32px 200px;
  }

  .km-kameo-container .kameo p {
    margin-top: 8px;
    margin-bottom: 8px;
  }

  .km-kameo-container .kameo h1 {
    font-size: 36px;
    font-weight: 600;
    line-height: 1.2;
    margin-bottom: 16px;
  }

  @media (max-width: 1024px) {
    .km-kameo-container .kameo {
      padding: 32px 100px;
    }
  }

  @media (max-width: 768px) {
    .km-kameo-container .kameo {
      padding: 32px 54px;
    }
  }
</style>
